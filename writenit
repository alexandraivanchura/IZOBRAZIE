#include <embree3/rtcore.h>
#include <embree3/rtcore_ray.h>

#include "integra.h"

#include "base/str.hpp"
#include "base/file.hpp"
#include "base/marray.hpp"
#include "math/matrix43.hpp"
#include "math/vect2.hpp"
#include "math/vect3.hpp"
#include "base/matrix.hpp"

START_C_DECLS
#include "ievl.h"
// #include "iosl.h"
#include "icol.h"
#include "imal.h"
#include "iifl.h"
#include "itoliifl.h"
// #include "itolscan.h"
// #include "suffix.h"
END_C_DECLS

#define C_NUMB_IIF_COMP 5

//////////////////////////////////////////////////////////////////////////////
/// Write NIT file of observer from luminance matrix of RGB components
/// @param nitfile - observer file(IN)
/// @param coldata - matrix of color luminance distribution(IN)
/// @param negvalue - how to process negative values
/// (-1 - keep as is, 0 - move to zero, 1 - reverse sign)(IN)
/// @return SUCCESS/FAILURE
OKAY WriteNITFile(const PathStr& nitfile,
    const TMatrix<Vect3f>& coldata, int negvalue)
{
    double white[XY], red[XY], green[XY], blue[XY];
    Str buf, buf1, buf2, layers, format, type;
    int i, j, k;
    float* pf, ** table;
    IIF* iif_file;
    INT64 rays;

    if ((iif_file = iif_open(nitfile.XData(), "w")) == NULL)
    {
        printf("\nIt is impossible to create observer file - %s",
            nitfile.XData());
        return FAILURE;
    }

    // Initialize resolution and component types
    layers = "lum red,lum gre,lum blu,lum acc,lum ray";
    format = "fffff";
    type = "LUMINANCE";
    if (iif_init_file(iif_file, coldata.NColumns(), coldata.NRows(),
        layers.XData(), format.XData()) != IIF_OK)
    {
        printf("\nIt is impossible to create observer file - %s",
            nitfile.XData());
        iif_close(iif_file);
        return FAILURE;
    }

    if (iif_put_var(iif_file, "FILE_TYPE", type.XData()) != IIF_OK)
    {
        printf("\nIt is impossible to create observer file - %s",
            nitfile.XData());
        iif_close(iif_file);
        return FAILURE;
    }

    if (iif_put_var(iif_file, "image pixel step", "1 1") != IIF_OK)
    {
        printf("\nIt is impossible to create observer file - %s",
            nitfile.XData());
        iif_close(iif_file);
        return FAILURE;
    }

    buf.Printf("1 1");
    if (iif_put_var(iif_file, "step size [m]", buf.XData()) != IIF_OK)
    {
        printf("\nIt is impossible to create observer file - %s",
            nitfile.XData());
        iif_close(iif_file);
        return FAILURE;
    }

    if (col_get_wrgb(white, red, green, blue) != COL_OK)
        ASSERT(FALSE)
    else
    {
        if (iif_put_var(iif_file, "GAMUT", "Yes") != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }

        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), white[X]);
        if (iif_put_var(iif_file, "WHITE_X", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }
        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), white[Y]);
        if (iif_put_var(iif_file, "WHITE_Y", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }

        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), red[X]);
        if (iif_put_var(iif_file, "RED_X", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }
        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), red[Y]);
        if (iif_put_var(iif_file, "RED_Y", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }

        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), green[X]);
        if (iif_put_var(iif_file, "GREEN_X", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }
        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), green[Y]);
        if (iif_put_var(iif_file, "GREEN_Y", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }

        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), blue[X]);
        if (iif_put_var(iif_file, "BLUE_X", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }
        buf.Printf(IF_V_FORMAT(IF_V_GAMUT), blue[Y]);
        if (iif_put_var(iif_file, "BLUE_Y", buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }
        rays = 0;
        buf.Printf(IF_V_FORMAT(IF_V_RAY_NUMBER), rays);
        if (iif_put_var(iif_file, IF_V_NAME(IF_V_RAY_NUMBER),
            buf.XData()) != IIF_OK)
        {
            printf("\nIt is impossible to create observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            return FAILURE;
        }
    }

    /* Set data pointers */
    table = new float* [C_NUMB_IIF_COMP];
    if (table == NULL)
    {
        printf("\nMemory allocation error - LUX file");
        iif_close(iif_file);
        delete[] table;
        return FAILURE;
    }
    table[R] = new float[coldata.NColumns() * C_NUMB_IIF_COMP];

    if (table[R] == NULL)
    {
        iif_close(iif_file);
        printf("\nMemory allocation error - NIT file");
        return FAILURE;
    }
    table[G] = table[R] + G * coldata.NColumns();
    table[B] = table[R] + B * coldata.NColumns();
    table[B + 1] = table[R] + (B + 1) * coldata.NColumns();
    table[B + 2] = table[R] + (B + 2) * coldata.NColumns();

    /* Print image */
    for (j = 0; j < coldata.NRows(); j++)
    {
        for (k = 0; k < RGB; k++)
        {
            pf = table[k];
            for (i = 0; i < coldata.NColumns(); i++)
            {
                if (negvalue > 0)
                    *pf++ = (float)Abs(coldata(j, i)[k]);
                else if (negvalue == 0 && coldata(j, i)[k] < 0)
                    *pf++ = (float)0;
                else
                    *pf++ = (float)(coldata(j, i)[k]);
            }
        }
        for (; k < C_NUMB_IIF_COMP; k++)
        {
            pf = table[k];
            for (i = 0; i < coldata.NColumns(); i++)
                *pf++ = (float)0;
        }

        if (iif_write_line(iif_file, (void*)table, j, -1, 0) != IIF_OK)
        {
            printf("\nIt is impossible to write observer file - %s",
                nitfile.XData());
            iif_close(iif_file);
            delete[] table[R];
            delete[] table;
            return FAILURE;
        }
    }

    // Close iif_file 
    delete[] table[R];
    delete[] table;
    iif_close(iif_file);
    return SUCCESS;
} // End of WriteNITFile()

//////////////////////////////////////////////////////////////////////////
/// Embree device error callback function
void DeviceErrorFunction(void* userPtr, enum RTCError error, const char* str)
{
    printf("Device error %d: %s\n", error, str);
}

//////////////////////////////////////////////////////////////////////////
/// Create a box object for Embree
/// @param[in] device Embree device
/// @param[in] p Box origin points
/// @param[in] size Box sizes along 3 axis
/// @param[in] tr Transformation matrix to apply to created geometry
/// @return Embree geometry object containing box
RTCGeometry CreateBox(RTCDevice device, Point3f p, Vect3f size, Matrix43f tr)
{
    RTCGeometry geom = rtcNewGeometry(device, RTC_GEOMETRY_TYPE_TRIANGLE);
    float* vertices = (float*)rtcSetNewGeometryBuffer(geom,
        RTC_BUFFER_TYPE_VERTEX,
        0,
        RTC_FORMAT_FLOAT3,
        3 * sizeof(float),
        8);

    unsigned* indices = (unsigned*)rtcSetNewGeometryBuffer(geom,
        RTC_BUFFER_TYPE_INDEX,
        0,
        RTC_FORMAT_UINT3,
        3 * sizeof(unsigned),
        12);
    if (vertices && indices)
    {
        Point3f points[8];
        points[0] = p;
        points[1] = p + Vect3f(size.x, 0, 0);
        points[2] = p + Vect3f(size.x, 0, size.z);
        points[3] = p + Vect3f(0, 0, size.z);
        points[4] = p + Vect3f(0, size.y, size.z);
        points[5] = p + Vect3f(0, size.y, 0);
        points[6] = p + Vect3f(size.x, size.y, 0);
        points[7] = p + size;

        for (int i = 0; i < 8; i++)
        {
            tr.PointTransform(points[i]);
            vertices[i * 3] = points[i].x;
            vertices[i * 3 + 1] = points[i].y;
            vertices[i * 3 + 2] = points[i].z;
        }

        int i = 0;
        indices[i++] = 0;
        indices[i++] = 1;
        indices[i++] = 2;

        indices[i++] = 2;
        indices[i++] = 3;
        indices[i++] = 0;

        indices[i++] = 4;
        indices[i++] = 5;
        indices[i++] = 0;

        indices[i++] = 0;
        indices[i++] = 3;
        indices[i++] = 4;

        indices[i++] = 7;
        indices[i++] = 6;
        indices[i++] = 5;

        indices[i++] = 5;
        indices[i++] = 4;
        indices[i++] = 7;

        indices[i++] = 3;
        indices[i++] = 2;
        indices[i++] = 7;

        indices[i++] = 7;
        indices[i++] = 4;
        indices[i++] = 3;

        indices[i++] = 7;
        indices[i++] = 2;
        indices[i++] = 1;

        indices[i++] = 1;
        indices[i++] = 6;
        indices[i++] = 7;

        indices[i++] = 0;
        indices[i++] = 5;
        indices[i++] = 6;

        indices[i++] = 6;
        indices[i++] = 1;
        indices[i++] = 1;
    }

    rtcCommitGeometry(geom);

    return geom;
}

/// Which box faces to omit flags
enum OmitFace
{
    /// Omit nothing
    OMIT_NONE = 0,
    /// Omit +X face
    OMIT_X_POS = 1,
    // Omit -X face
    OMIT_X_NEG = 2,
    /// Omit +Y face
    OMIT_Y_POS = 4,
    /// Omit -Y face
    OMIT_Y_NEG = 8,
    /// Omit +Z face
    OMIT_Z_POS = 16,
    /// Omit -Z face
    OMIT_Z_NEG = 32
};

//////////////////////////////////////////////////////////////////////////
/// Create a box object for Embree. Some faces may be omitted.
/// @param[in] device Embree device
/// @param[in] p Box origin points
/// @param[in] size Box sizes along 3 axis
/// @param[in] omit A mask of which faces to omit
/// @param[in] tr Transformation matrix to apply to created geometry
/// @return Embree geometry object containing box
RTCGeometry CreateBoxOmit(RTCDevice device, Point3f p, Vect3f size, int omit, Matrix43f tr)
{
    int omits[6] = { 1, 2, 4, 8, 16, 32 };

    int omit_count = 0;
    for (int i = 0; i < 6; i++)
        if (omit & omits[i])
            omit_count++;

    RTCGeometry geom = rtcNewGeometry(device, RTC_GEOMETRY_TYPE_TRIANGLE);
    float* vertices = (float*)rtcSetNewGeometryBuffer(geom,
        RTC_BUFFER_TYPE_VERTEX,
        0,
        RTC_FORMAT_FLOAT3,
        3 * sizeof(float),
        8);

    unsigned* indices = (unsigned*)rtcSetNewGeometryBuffer(geom,
        RTC_BUFFER_TYPE_INDEX,
        0,
        RTC_FORMAT_UINT3,
        3 * sizeof(unsigned),
        12 - omit_count * 2);
    if (vertices && indices)
    {
        Point3f points[8];
        points[0] = p;
        points[1] = p + Vect3f(size.x, 0, 0);
        points[2] = p + Vect3f(size.x, 0, size.z);
        points[3] = p + Vect3f(0, 0, size.z);
        points[4] = p + Vect3f(0, size.y, size.z);
        points[5] = p + Vect3f(0, size.y, 0);
        points[6] = p + Vect3f(size.x, size.y, 0);
        points[7] = p + size;

        for (int i = 0; i < 8; i++)
        {
            tr.PointTransform(points[i]);
            vertices[i * 3] = points[i].x;
            vertices[i * 3 + 1] = points[i].y;
            vertices[i * 3 + 2] = points[i].z;
        }

        int i = 0;
        if (!(omit & OMIT_Y_NEG))
        {
            indices[i++] = 0;
            indices[i++] = 1;
            indices[i++] = 2;

            indices[i++] = 2;
            indices[i++] = 3;
            indices[i++] = 0;
        }

        if (!(omit & OMIT_X_NEG))
        {
            indices[i++] = 4;
            indices[i++] = 5;
            indices[i++] = 0;

            indices[i++] = 0;
            indices[i++] = 3;
            indices[i++] = 4;
        }

        if (!(omit & OMIT_Y_POS))
        {
            indices[i++] = 7;
            indices[i++] = 6;
            indices[i++] = 5;

            indices[i++] = 5;
            indices[i++] = 4;
            indices[i++] = 7;
        }

        if (!(omit & OMIT_Z_POS))
        {
            indices[i++] = 3;
            indices[i++] = 2;
            indices[i++] = 7;

            indices[i++] = 7;
            indices[i++] = 4;
            indices[i++] = 3;
        }

        if (!(omit & OMIT_X_POS))
        {
            indices[i++] = 7;
            indices[i++] = 2;
            indices[i++] = 1;

            indices[i++] = 1;
            indices[i++] = 6;
            indices[i++] = 7;
        }

        if (!(omit & OMIT_Z_NEG))
        {
            indices[i++] = 0;
            indices[i++] = 5;
            indices[i++] = 6;

            indices[i++] = 6;
            indices[i++] = 1;
            indices[i++] = 1;
        }
    }

    rtcCommitGeometry(geom);

    return geom;
}

//////////////////////////////////////////////////////////////////////////
/// Subdivide sphere face
/// @param[in] v1 First vertex of face to subdivide
/// @param[in] v2 Second vertex of face to subdivide
/// @param[in] v3 Third vertex of face to subdivide
/// @param[in] i1 Index of the first vertex
/// @param[in] i2 Index of the second vertex
/// @param[in] i3 Index of the third vertex
/// @param[in, out] sphere_pints Array of vertexes
/// @param[in, out] sphere_indices Array of triangle indices
/// @param[in] depth Subdivision depth
void SphereSubdivide(Vect3f v1, Vect3f v2, Vect3f v3, const unsigned i1, const unsigned i2, const unsigned i3,
    TArray<Vect3f>& sphere_points, TArray<Vect3u>& sphere_indices, unsigned int depth) {
    if (depth == 0)
    {
        sphere_indices.Add(Vect3u(i1, i2, i3));
        return;
    }

    Vect3f v12 = (v1 + v2).Normalize();
    Vect3f v23 = (v2 + v3).Normalize();
    Vect3f v31 = (v3 + v1).Normalize();

    unsigned i12 = sphere_points.Length();
    unsigned i23 = i12 + 1;
    unsigned i31 = i23 + 1;

    sphere_points.Add(v12);
    sphere_points.Add(v23);
    sphere_points.Add(v31);

    SphereSubdivide(v1, v12, v31, i1, i12, i31, sphere_points, sphere_indices, depth - 1);
    SphereSubdivide(v2, v23, v12, i2, i23, i12, sphere_points, sphere_indices, depth - 1);
    SphereSubdivide(v3, v31, v23, i3, i31, i23, sphere_points, sphere_indices, depth - 1);
    SphereSubdivide(v12, v23, v31, i12, i23, i31, sphere_points, sphere_indices, depth - 1);
}

//////////////////////////////////////////////////////////////////////////
/// Start subdividing a sphere
/// @param[out] sphere_pints Array of vertexes
/// @param[out] sphere_indices Array of triangle indices
/// @param[in] depth Subdivision depth
void InitSphere(TArray<Vect3f>& sphere_points, TArray<Vect3u>& sphere_indices, unsigned int depth)
{
    const float X0 = 0.525731112119133606f;
    const float Z0 = 0.850650808352039932f;
    sphere_points.Truncate();
    sphere_points.Add({ -X0, 0.0,  Z0 });
    sphere_points.Add({ X0, 0.0,  Z0 });
    sphere_points.Add({ -X0, 0.0, -Z0 });
    sphere_points.Add({ X0, 0.0, -Z0 });
    sphere_points.Add({ 0.0,  Z0,  X0 });
    sphere_points.Add({ 0.0,  Z0, -X0 });
    sphere_points.Add({ 0.0, -Z0,  X0 });
    sphere_points.Add({ 0.0, -Z0, -X0 });
    sphere_points.Add({ Z0,  X0, 0.0 });
    sphere_points.Add({ -Z0,  X0, 0.0 });
    sphere_points.Add({ Z0, -X0, 0.0 });
    sphere_points.Add({ -Z0, -X0, 0.0 });


    int tindices[20][3] =
    {
      {0, 4, 1},    { 0, 9, 4 },  { 9, 5, 4 },  { 4, 5, 8 },  { 4, 8, 1 },
      { 8, 10, 1 }, { 8, 3, 10 }, { 5, 3, 8 },  { 5, 2, 3 },  { 2, 7, 3 },
      { 7, 10, 3 }, { 7, 6, 10 }, { 7, 11, 6 }, { 11, 0, 6 }, { 0, 1, 6 },
      { 6, 1, 10 }, { 9, 0, 11 }, { 9, 11, 2 }, { 9, 2, 5 },  { 7, 2, 11 }
    };
    for (int i = 0; i < 20; i++)
        SphereSubdivide(sphere_points[tindices[i][0]], sphere_points[tindices[i][1]], sphere_points[tindices[i][2]],
            tindices[i][0], tindices[i][1], tindices[i][2],
            sphere_points, sphere_indices, depth);
}

//////////////////////////////////////////////////////////////////////////
/// Create a sphere object for Embree
/// @param[in] device Embree device
/// @param[in] center Sphere center
/// @param[in] radius Sphere radius
/// @param[in] tr Transformation matrix to apply to created geometry
/// @return Embree geometry object containing sphere
RTCGeometry CreateSphere(RTCDevice device, Point3f center, float radius, unsigned int depth, Matrix43f tr)
{
    TArray<Vect3f> sphere_normals;
    TArray<Vect3u> sphere_indices;

    InitSphere(sphere_normals, sphere_indices, depth);

    TArray<Point3f> sphere_points;
    for (int i = 0; i < sphere_normals.Length(); i++)
    {
        sphere_points.Add(center + sphere_normals[i] * radius);
        tr.PointTransform(sphere_points[i]);
    }

    RTCGeometry geom = rtcNewGeometry(device, RTC_GEOMETRY_TYPE_TRIANGLE);
    float* vertices = (float*)rtcSetNewGeometryBuffer(geom,
        RTC_BUFFER_TYPE_VERTEX,
        0,
        RTC_FORMAT_FLOAT3,
        3 * sizeof(float),
        sphere_points.Length());

    unsigned* indices = (unsigned*)rtcSetNewGeometryBuffer(geom,
        RTC_BUFFER_TYPE_INDEX,
        0,
        RTC_FORMAT_UINT3,
        3 * sizeof(unsigned),
        sphere_indices.Length());

    if (vertices && indices)
    {
        for (int i = 0; i < sphere_points.Length(); i++)
        {
            vertices[i * 3] = sphere_points[i].x;
            vertices[i * 3 + 1] = sphere_points[i].y;
            vertices[i * 3 + 2] = sphere_points[i].z;
        }

        for (int i = 0; i < sphere_indices.Length(); i++)
        {
            indices[i * 3] = sphere_indices[i].x;
            indices[i * 3 + 1] = sphere_indices[i].y;
            indices[i * 3 + 2] = sphere_indices[i].z;
        }
    }

    rtcCommitGeometry(geom);

    return geom;
}

//classes: light, camera(+экран), ray, opt prop, geometry -> scene -> render

class ray { // класс луча
public:
    Point3f start; // точка начала
    Vect3f dir; // направление
    float tfar; // длина луча

public:
    ray(Point3f st, Point3f fin) { // создание луча по точкам начала и конца
        start = st;
        dir = Vect3f(fin.x - st.x, fin.y - st.y, fin.z - st.z);
        tfar = dir.Length();
        if (tfar != 0)
            dir.Normalize();
    }
};

class light { // класс источника света
public:
    Point3f position; // положение 
    Vect3f Intensity; // интенсивность по трем каналам

public:
    light() {
        position = Point3f(0, 0, 0);
        Intensity = Vect3f(1000, 1000, 1000);
    }
    light(float x, float y, float z, float r, float g, float b) {
        position = Point3f(x, y, z);
        Intensity = Vect3f(r, g, b);
    }
    Vect3f illumination(Point3f p, Vect3f N) { // функция освещенности
        ray r = ray(p, position); //луч от точки на объекте до источника света
        float d = r.tfar; //расстояние до источника света
        float cos = r.dir.x * N.x + r.dir.y * N.y + r.dir.z * N.z; // нормаль и вектор луча единичные
        if (d == 0)
            return 0;
        else {
            /*if (cos < 0)
                return Vect3f(0);*/
            if (cos < 0)
                cos = -cos;
            Vect3f res = Intensity * cos / d / d;
            return res;
        }
    }
};

class optprop { // класс оптического свойства
    Vect3f rgb; // цвет поверхности

public:
    optprop() {
        rgb = Vect3f(255, 255, 255);
        rgb = rgb.Normalize(); // коэффициент не больше единицы
    }
    optprop(float r, float g, float b) {
        rgb = Vect3f(r, g, b);
        rgb = rgb.Length() == 0 ? rgb : rgb.Normalize(); // коэффициент не больше единицы
    }

    Vect3f brighness(Vect3f E) { // функция яркости
        Vect3f res = Vect3f(rgb.x * E.x, rgb.y * E.y, rgb.z * E.z);
        res /= PI;
        return res;
    }
};

class camera { // класс камеры
public:
    Point3f position; // глаз
    Point3f topleft; // левый верхний угол
    int resolutionX, resolutionY; // разрешение по Х и по У
    Vect3f dx, dy; // размеры пикселя

public:
    camera() {
        position = Point3f(0, 0, -10);
        topleft = Point3f(-10, 10, 0);

        resolutionX = 256;
        resolutionY = 256;

        dx = Vect3f(2 * -topleft.x / 256, 0, 0);
        dy = Vect3f(0, -2 * topleft.y / 256, 0);
    }
    camera(int resX, int resY, float anglex) {
        position = Point3f(0, 0, -10);
        topleft = Point3f(-10, 10, 0);

        resolutionX = resX;
        resolutionY = resY;

        float i = 2 * -topleft.x / resolutionX;
        float j = -2 * topleft.y / resolutionY;

        dx = Vect3f(i, 0, 0);
        dy = Vect3f(0, j, 0);

        Matrix43f tm(1); // Поворот экрана вокруг осей
        tm.RotationX(anglex * PI / 180);
        /*tm.RotationY(angley * PI / 180);
        tm.RotationZ(anglez * PI / 180);*/
        tm.PointTransform(topleft);
        tm.PointTransform(position);
        tm.VectorTransform(dx);
        tm.VectorTransform(dy);
    }

    ray getRay(int x, int y) { // луч проходящий через глаз и xy-пиксель экрана
        int val = 1000;
        Vect3f randx = dx * (rand() % val / val);
        Vect3f randy = dy * (rand() % val / val);
        Point3f screen_point = topleft + x * dx + randx + y * dy + randy; // Позиция на экране
        return ray(position, screen_point);
    }
};

struct point_and_normal { // структура с точкой пересечения, нормалью к поверхности и id объекта
    Point3f point;
    Vect3f N;
    int id;
};

bool accur_equal(Point3f a, Point3f b, int accuracy) { // сравнение точек с точностью до accuracy
    float x1 = round(a.x * accuracy) / accuracy;
    float y1 = round(a.y * accuracy) / accuracy;
    float z1 = round(a.z * accuracy) / accuracy;

    float x2 = round(b.x * accuracy) / accuracy;
    float y2 = round(b.y * accuracy) / accuracy;
    float z2 = round(b.z * accuracy) / accuracy;

    if (x1 == x2 && y1 == y2 && z1 == z2)
        return 1;

    return 0;
}

class geometry { // класс геометрии
public:
    RTCScene sc; // embree сцена

public:
    geometry() { // создание геометрии
        RTCDevice device = rtcNewDevice(NULL);
        if (device == NULL)
        {
            printf("Device error %d: cannot create device\n", rtcGetDeviceError(NULL));
            return;
        }
        rtcSetDeviceErrorFunction(device, DeviceErrorFunction, NULL);

        sc = rtcNewScene(device);

        RTCGeometry sphere1 = CreateSphere(device, Point3f(1, -5, 10), 5, 5, Matrix43f(1, 1, 1));
        rtcAttachGeometry(sc, sphere1);

        RTCGeometry sphere2 = CreateSphere(device, Point3f(1, -2, 3), 2, 5, Matrix43f(1, 1, 1));
        rtcAttachGeometry(sc, sphere2);

        rtcCommitScene(sc);
    }

    point_and_normal Intersection(ray r) { // поиск пересечения луча с геометрией
        struct RTCRayHit rayhit;
        rayhit.ray.org_x = r.start.x;
        rayhit.ray.org_y = r.start.y;
        rayhit.ray.org_z = r.start.z;
        rayhit.ray.dir_x = r.dir.x;
        rayhit.ray.dir_y = r.dir.y;
        rayhit.ray.dir_z = r.dir.z;
        rayhit.ray.tnear = 0;
        rayhit.ray.tfar = (float)MathF::MAX_VALUE;
        rayhit.ray.mask = 0;
        rayhit.ray.flags = 0;
        rayhit.hit.geomID = RTC_INVALID_GEOMETRY_ID;
        rayhit.hit.instID[0] = RTC_INVALID_GEOMETRY_ID;

        struct RTCIntersectContext context;
        rtcInitIntersectContext(&context);

        rtcIntersect1(sc, &context, &rayhit);
        Point3f point;
        Vect3f N;
        int id = -1;

        if (rayhit.hit.geomID != RTC_INVALID_GEOMETRY_ID) {
            point = r.start + r.dir * rayhit.ray.tfar;
            N = Vect3f(rayhit.hit.Ng_x, rayhit.hit.Ng_y, rayhit.hit.Ng_z);
            N = N.Normalize();
            id = rayhit.hit.geomID;
        }
        else {
            point = Point3f(0);
            N = Vect3f(0);
            id = -1;
        }

        return point_and_normal{ point, N, id };
    }

    bool is_not_shadow(Point3f p, ray light) { // нет ли тени от этого источника света в этой точке
        struct RTCRayHit rayhit;
        rayhit.ray.org_x = light.start.x;
        rayhit.ray.org_y = light.start.y;
        rayhit.ray.org_z = light.start.z;
        rayhit.ray.dir_x = light.dir.x;
        rayhit.ray.dir_y = light.dir.y;
        rayhit.ray.dir_z = light.dir.z;
        rayhit.ray.tnear = 0;
        rayhit.ray.tfar = (float)MathF::MAX_VALUE;
        rayhit.ray.mask = 0;
        rayhit.ray.flags = 0;
        rayhit.hit.geomID = RTC_INVALID_GEOMETRY_ID;
        rayhit.hit.instID[0] = RTC_INVALID_GEOMETRY_ID;

        struct RTCIntersectContext context;
        rtcInitIntersectContext(&context);

        rtcIntersect1(sc, &context, &rayhit);

        Point3f result_point = light.start + light.dir * rayhit.ray.tfar;
        
        if (accur_equal(p, result_point, 100))
            return 1;
        else
            return 0;
    }
};

class scene { // класс-чемодан сцены
public:
    geometry geom;
    int light_n = 2;
    light* lights = new light[light_n];

    int op_n = 2;
    optprop* op = new optprop[op_n];
    camera cam;

public:
    scene() {
        geom = geometry();

        lights[0] = light(3, 0, -7, 12800, 30000, 10000);
        lights[1] = light(-10, 0, -7, 10000, 12800, 30000);
        /*lights[0] = light(3, 0, -7, 30000, 30000, 30000);
        lights[1] = light(-10, 0, -7, 10000, 10000, 10000);*/
        //lights[1] = light(1, -10, 10, 1840, 810, 2220);
        /*lights[0] = light(1, 10, 10, 10000, 10000, 10000);
        lights[1] = light(1, -10, 10, 10000, 10000, 10000);*/
        //lights[2] = light(-30, 0, 0, 10000, 10000, 10000);

        op[0] = optprop(255, 100, 100);
        op[1] = optprop(100, 255, 100);
        //op[0] = optprop(27, 50, 141);
        //op[1] = optprop(172, 143, 93);

        cam = camera(1000, 1000, 45);
    }
};

class render { // класс рендера
public:
    render() {
    }
    void rendering(scene sc) { // просчет картинки
        geometry g = sc.geom;
        light* l = sc.lights;
        optprop* o = sc.op;
        camera c = sc.cam;

        TMatrix<Vect3f> m = TMatrix<Vect3f>(c.resolutionX, c.resolutionY); // картинка

        int n = sc.light_n; // количество источников света

        for (int i = 0; i < c.resolutionX; i++) {
            for (int j = 0; j < c.resolutionY; j++) {
                m[i][j] = Vect3f(0);

                ray r = c.getRay(i, j); // луч от глаза через xy-пиксель

                point_and_normal in = g.Intersection(r); // ещем пересечение глаза с геометрией

                if (in.id != -1) { // если нашли пересечение
                    for (int k = 0; k < n; k++) {
                        ray li = ray(l[k].position, in.point); // луч от источника света до точки на объекте

                        if (g.is_not_shadow(in.point, li)) {
                            Vect3f L = o[in.id].brighness(l[k].illumination(in.point, in.N)); // яркость в точке от этого источника
                            m[i][j] += L;
                        }
                    }
                }
            }
        }
        PathStr ps = PathStr("nit.nit"); // создание файла
        WriteNITFile(ps, m, 0);
    }
};

//////////////////////////////////////////////////////////////////////////
/// Program entry point.
int main()
{
    mem_init(NULL, NULL, "temp.mem");
    ev_init();
    col_init();

    /*Vect3f t = Vect3f(3);
    t = t.Normalize();
    printf("%f, %f, %f\n%f", t.x, t.y, t.z, t.Length());

    getchar();*/

    render r = render();
    scene s = scene();
    r.rendering(s);

    //getchar();

    col_term();
    ev_term();
    mem_close();

    return 0;
}
