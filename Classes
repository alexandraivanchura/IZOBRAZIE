//classes: light, camera(+экран), ray, opt prop, geometry -> scene -> render

class ray { // класс луча
public:
    Point3f start; // точка начала
    Vect3f dir; // направление
    float tfar; // длина луча

public:
    ray(Point3f st, Point3f fin) {
        start = st;
        dir = Vect3f(fin.x - st.x, fin.y - st.y, fin.z - st.z);
        tfar = dir.Length();
        if (tfar != 0)
            dir.Normalize();
    }
};

class light { // класс источника света
public:
    Point3f position; // положение 
    Vect3f Intensity; // интенсивность по трем каналам

public:
    light() {
        position = Point3f(0, 0, 0);
        Intensity = Vect3f(1000, 1000, 1000);
    }
    light(float x, float y, float z, float r, float g, float b) {
        position = Point3f(x, y, z);
        Intensity = Vect3f(r, g, b);
    }
    Vect3f illumination(Point3f p, Vect3f N) { // функция освещенности
        ray r = ray(p, position); //луч от точки на объекте до источника света
        float d = r.tfar; //расстояние до источника света
        float cos = r.dir.x * N.x + r.dir.y * N.y + r.dir.z * N.z; // нормаль и вектор луча единичные
        if (d == 0)
            return 0;
        else {
            /*if (cos < 0)
                return Vect3f(0);*/
            if (cos < 0)
                cos = -cos;
            Vect3f res = Intensity * cos / d / d;
            return res;
        }
    }
};

class optprop { // класс оптического свойства
    Vect3f rgb;

public:
    optprop() {
        rgb = Vect3f(255, 255, 255);
        rgb = rgb.Normalize();
    }
    optprop(float r, float g, float b) {
        rgb = Vect3f(r, g, b);
        rgb = rgb.Length() == 0 ? rgb : rgb.Normalize();
    }

    Vect3f brighness(Vect3f E) { // функция яркости
        Vect3f res = Vect3f(rgb.x * E.x, rgb.y * E.y, rgb.z * E.z);
        res /= PI;
        return res;
    }
};

class camera { // класс камеры
public:
    Point3f position; // глаз
    Point3f topleft; // левый верхний угол
    int resolutionX, resolutionY; // разрешение по Х и по У
    Vect3f dx, dy; // размеры пикселя

public:
    camera() {
        position = Point3f(0, 0, -10);
        topleft = Point3f(-10, 10, 0);

        resolutionX = 256;
        resolutionY = 256;

        dx = Vect3f(2 * -topleft.x / 256, 0, 0);
        dy = Vect3f(0, -2 * topleft.y / 256, 0);
    }
    camera(int resX, int resY, float anglex) {
        position = Point3f(0, 0, -10);
        topleft = Point3f(-10, 10, 0);

        resolutionX = resX;
        resolutionY = resY;

        float i = 2 * -topleft.x / resolutionX;
        float j = -2 * topleft.y / resolutionY;

        dx = Vect3f(i, 0, 0);
        dy = Vect3f(0, j, 0);

        Matrix43f tm(1); // Поворот экрана вокруг осей
        tm.RotationX(anglex * PI / 180);
        /*tm.RotationY(angley * PI / 180);
        tm.RotationZ(anglez * PI / 180);*/
        tm.PointTransform(topleft);
        tm.PointTransform(position);
        tm.VectorTransform(dx);
        tm.VectorTransform(dy);
    }

    ray getRay(int x, int y) {
        int val = 1000;
        Vect3f randx = dx * (rand() % val / val);
        Vect3f randy = dy * (rand() % val / val);
        Point3f screen_point = topleft + x * dx + randx + y * dy + randy; // Позиция на экране (в углу пока без рандома)
        return ray(position, screen_point);
    }
};

struct point_and_normal {
    Point3f point;
    Vect3f N;
};

bool accur_equal(Point3f a, Point3f b, int accuracy) {
    float x1 = round(a.x * accuracy) / accuracy;
    float y1 = round(a.y * accuracy) / accuracy;
    float z1 = round(a.z * accuracy) / accuracy;

    float x2 = round(b.x * accuracy) / accuracy;
    float y2 = round(b.y * accuracy) / accuracy;
    float z2 = round(b.z * accuracy) / accuracy;

    if (x1 == x2 && y1 == y2 && z1 == z2)
        return 1;

    return 0;
}

class geometry {
public:
    RTCScene sc;

public:
    geometry() {
        RTCDevice device = rtcNewDevice(NULL);
        if (device == NULL)
        {
            printf("Device error %d: cannot create device\n", rtcGetDeviceError(NULL));
            return;
        }
        rtcSetDeviceErrorFunction(device, DeviceErrorFunction, NULL);

        sc = rtcNewScene(device);

        RTCGeometry sphere1 = CreateSphere(device, Point3f(1, -5, 10), 5, 5, Matrix43f(1, 1, 1));
        rtcAttachGeometry(sc, sphere1);

        RTCGeometry sphere2 = CreateSphere(device, Point3f(1, -2, 3), 2, 5, Matrix43f(1, 1, 1));
        rtcAttachGeometry(sc, sphere2);

        rtcCommitScene(sc);
    }

    point_and_normal Intersection(ray r) {
        struct RTCRayHit rayhit;
        rayhit.ray.org_x = r.start.x;
        rayhit.ray.org_y = r.start.y;
        rayhit.ray.org_z = r.start.z;
        rayhit.ray.dir_x = r.dir.x;
        rayhit.ray.dir_y = r.dir.y;
        rayhit.ray.dir_z = r.dir.z;
        rayhit.ray.tnear = 0;
        rayhit.ray.tfar = (float)MathF::MAX_VALUE;
        rayhit.ray.mask = 0;
        rayhit.ray.flags = 0;
        rayhit.hit.geomID = RTC_INVALID_GEOMETRY_ID;
        rayhit.hit.instID[0] = RTC_INVALID_GEOMETRY_ID;

        struct RTCIntersectContext context;
        rtcInitIntersectContext(&context);

        rtcIntersect1(sc, &context, &rayhit);
        Point3f point;
        Vect3f N;

        //printf("\n%i", rayhit.hit.geomID);

        if (rayhit.hit.geomID != RTC_INVALID_GEOMETRY_ID) {
            point = r.start + r.dir * rayhit.ray.tfar;
            N = Vect3f(rayhit.hit.Ng_x, rayhit.hit.Ng_y, rayhit.hit.Ng_z);
            N = N.Normalize();
        }
        else {
            point = Point3f(0);
            N = Vect3f(0);
        }

        return point_and_normal{ point, N };
    }

    bool is_not_shadow(Point3f p, ray light) { // нет ли тени от этого источника света в этой точке
        struct RTCRayHit rayhit;
        rayhit.ray.org_x = light.start.x;
        rayhit.ray.org_y = light.start.y;
        rayhit.ray.org_z = light.start.z;
        rayhit.ray.dir_x = light.dir.x;
        rayhit.ray.dir_y = light.dir.y;
        rayhit.ray.dir_z = light.dir.z;
        rayhit.ray.tnear = 0;
        rayhit.ray.tfar = (float)MathF::MAX_VALUE;
        rayhit.ray.mask = 0;
        rayhit.ray.flags = 0;
        rayhit.hit.geomID = RTC_INVALID_GEOMETRY_ID;
        rayhit.hit.instID[0] = RTC_INVALID_GEOMETRY_ID;

        struct RTCIntersectContext context;
        rtcInitIntersectContext(&context);

        rtcIntersect1(sc, &context, &rayhit);

        Point3f result_point = light.start + light.dir * rayhit.ray.tfar;
        
        if (accur_equal(p, result_point, 100))
            return 1;
        else
            return 0;
    }
};

class scene { // класс-чемодан сцены
public:
    geometry geom;
    int light_n = 2;
    light* lights = new light[light_n];

    int op_n = 1;
    optprop* op = new optprop[op_n];
    camera cam;

public:
    scene() {
        geom = geometry();

        lights[0] = light(3, 0, -7, 12800, 30000, 10000);
        lights[1] = light(-10, 0, -7, 30000, 12800, 10000);
        //lights[1] = light(1, -10, 10, 1840, 810, 2220);
        /*lights[0] = light(1, 10, 10, 10000, 10000, 10000);
        lights[1] = light(1, -10, 10, 10000, 10000, 10000);*/
        //lights[2] = light(-30, 0, 0, 10000, 10000, 10000);

        op[0] = optprop(255, 255, 255);
        //op[0] = optprop(27, 50, 141);
        //op[1] = optprop(172, 143, 93);

        cam = camera(1000, 1000, 45);
    }
};

class render {
public:
    render() {
    }
    void rendering(scene sc) {
        geometry g = sc.geom;
        light* l = sc.lights;
        optprop* o = sc.op;
        camera c = sc.cam;

        TMatrix<Vect3f> m = TMatrix<Vect3f>(c.resolutionX, c.resolutionY);

        int n = sc.light_n; // количество источников света

        for (int i = 0; i < c.resolutionX; i++) {
            for (int j = 0; j < c.resolutionY; j++) {
                m[i][j] = Vect3f(0);

                ray r = c.getRay(i, j);

                point_and_normal in = g.Intersection(r); // ещем пересечение глаза с геометрией

                if (in.N != Vect3f(0)) { // если нашли пересечение
                    for (int k = 0; k < n; k++) {
                        ray li = ray(l[k].position, in.point); // луч от источника света до точки на объекте

                        if (g.is_not_shadow(in.point, li)) {
                            Vect3f L = o[0].brighness(l[k].illumination(in.point, in.N)); // яркость в точке от этого источника
                            m[i][j] += L;
                        }
                    }
                }
            }
        }
        PathStr ps = PathStr("nit.nit"); // создание файла
        WriteNITFile(ps, m, 0);
    }
};
